import { expect } from 'chai'
import * as onionRouting from '../../src/ln/crypto/onion_routing'
import {Map} from 'immutable'
var ec = require('secp256k1')
var random = require('crypto')

describe('Onion Routing Test', () => {
  describe('Packet generation and forwarding', () => {
    it('Constructs packet correctly', () => {
      let paymentPath = []
      paymentPath.push(Buffer.from('02eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619', 'hex'))
      paymentPath.push(Buffer.from('0324653eac434488002cc06bbfb7f10fe18991e35f9fe4302dbea6d2353dc0ab1c', 'hex'))
      paymentPath.push(Buffer.from('027f31ebc5462c1fdce1b737ecff52d37d75dea43ce11c74d25aa297165faa2007', 'hex'))
      paymentPath.push(Buffer.from('032c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991', 'hex'))
      paymentPath.push(Buffer.from('02edabbd16b41c8371b92ef2f04c1185b4f03b6dcd52ba9b78d9d7c89c8f221145', 'hex'))

      let hopsData = [{'payload': Buffer.from('000000000000000000000000000000000000000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000101010101010101000000010000000100000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000202020202020202000000020000000200000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000303030303030303000000030000000300000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000404040404040404000000040000000400000000000000000000000000000000', 'hex')}]
      let sessionKey = Buffer.from('4141414141414141414141414141414141414141414141414141414141414141', 'hex')

      let associatedData = Buffer.from('4242424242424242424242424242424242424242424242424242424242424242', 'hex')

      expect(onionRouting.constructPacket(paymentPath, sessionKey, hopsData, associatedData).toString('hex'))
        .equal('0002eec7245d6b7d2ccb30380bfbe2a3648cd7a942653f5aa340edcea1f283686619e5f14350c2a76fc232b5e46d421e9615471ab9e0bc887beff8c95fdb878f7b3a716a996c7845c93d90e4ecbb9bde4ece2f69425c99e4bc820e44485455f135edc0d10f7d61ab590531cf08000179a333a347f8b4072f216400406bdf3bf038659793d4a1fd7b246979e3150a0a4cb052c9ec69acf0f48c3d39cd55675fe717cb7d80ce721caad69320c3a469a202f1e468c67eaf7a7cd8226d0fd32f7b48084dca885d56047694762b67021713ca673929c163ec36e04e40ca8e1c6d17569419d3039d9a1ec866abe044a9ad635778b961fc0776dc832b3a451bd5d35072d2269cf9b040f6b7a7dad84fb114ed413b1426cb96ceaf83825665ed5a1d002c1687f92465b49ed4c7f0218ff8c6c7dd7221d589c65b3b9aaa71a41484b122846c7c7b57e02e679ea8469b70e14fe4f70fee4d87b910cf144be6fe48eef24da475c0b0bcc6565ae82cd3f4e3b24c76eaa5616c6111343306ab35c1fe5ca4a77c0e314ed7dba39d6f1e0de791719c241a939cc493bea2bae1c1e932679ea94d29084278513c77b899cc98059d06a27d171b0dbdf6bee13ddc4fc17a0c4d2827d488436b57baa167544138ca2e64a11b43ac8a06cd0c2fba2d4d900ed2d9205305e2d7383cc98dacb078133de5f6fb6bed2ef26ba92cea28aafc3b9948dd9ae5559e8bd6920b8cea462aa445ca6a95e0e7ba52961b181c79e73bd581821df2b10173727a810c92b83b5ba4a0403eb710d2ca10689a35bec6c3a708e9e92f7d78ff3c5d9989574b00c6736f84c199256e76e19e78f0c98a9d580b4a658c84fc8f2096c2fbea8f5f8c59d0fdacb3be2802ef802abbecb3aba4acaac69a0e965abd8981e9896b1f6ef9d60f7a164b371af869fd0e48073742825e9434fc54da837e120266d53302954843538ea7c6c3dbfb4ff3b2fdbe244437f2a153ccf7bdb4c92aa08102d4f3cff2ae5ef86fab4653595e6a5837fa2f3e29f27a9cde5966843fb847a4a61f1e76c281fe8bb2b0a181d096100db5a1a5ce7a910238251a43ca556712eaadea167fb4d7d75825e440f3ecd782036d7574df8bceacb397abefc5f5254d2722215c53ff54af8299aaaad642c6d72a14d27882d9bbd539e1cc7a527526ba89b8c037ad09120e98ab042d3e8652b31ae0e478516bfaf88efca9f3676ffe99d2819dcaeb7610a626695f53117665d267d3f7abebd6bbd6733f645c72c389f03855bdf1e4b8075b516569b118233a0f0971d24b83113c0b096f5216a207ca99a7cddc81c130923fe3d91e7508c9ac5f2e914ff5dccab9e558566fa14efb34ac98d878580814b94b73acbfde9072f30b881f7f0fff42d4045d1ace6322d86a97d164aa84d93a60498065cc7c20e636f5862dc81531a88c60305a2e59a985be327a6902e4bed986dbf4a0b50c217af0ea7fdf9ab37f9ea1a1aaa72f54cf40154ea9b269f1a7c09f9f43245109431a175d50e2db0132337baa0ef97eed0fcf20489da36b79a1172faccc2f7ded7c60e00694282d93359c4682135642bc81f433574aa8ef0c97b4ade7ca372c5ffc23c7eddd839bab4e0f14d6df15c9dbeab176bec8b5701cf054eb3072f6dadc98f88819042bf10c407516ee58bce33fbe3b3d86a54255e577db4598e30a135361528c101683a5fcde7e8ba53f3456254be8f45fe3a56120ae96ea3773631fcb3873aa3abd91bcff00bd38bd43697a2e789e00da6077482e7b1b1a677b5afae4c54e6cbdf7377b694eb7d7a5b913476a5be923322d3de06060fd5e819635232a2cf4f0731da13b8546d1d6d4f8d75b9fce6c2341a71b0ea6f780df54bfdb0dd5cd9855179f602f9172307c7268724c3618e6817abd793adc214a0dc0bc616816632f27ea336fb56dfd')
    })


    it('constructs errror packet correctly', () => {
      let sharedSecrets = [
        Buffer.from('53eb63ea8a3fec3b3cd433b85cd62a4b145e1dda09391b348c4e1cd36a03ea66', 'hex'),
        Buffer.from('a6519e98832a0b179f62123b3567c106db99ee37bef036e783263602f3488fae', 'hex'),
        Buffer.from('3a6b412548762f0dbccce5c7ae7bb8147d1caf9b5471c34120b30bc9c04891cc', 'hex'),
        Buffer.from('21e13c2d7cfe7e18836df50872466117a295783ab8aab0e7ecc8c725503ad02d', 'hex'),
        Buffer.from('b5756b9b542727dbafc6765a49488b023a725d631af688fc031217e90770c328', 'hex')
      ]
      let payload = Buffer.from('0002200200fehex')
      let packet = onionRouting.constructErrorPacket(payload, sharedSecrets[4])
      expect(packet.toString('hex'))
        .equal('a5e6bd0c74cb347f10cce367f949098f2457d14c046fd8a22cb96efb30b0fdcda8cb9168b50f2fd45edd73c1b0c8b33002df376801ff58aaa94000bf8a86f92620f343baef38a580102395ae3abf9128d1047a0736ff9b83d456740ebbb4aeb3aa9737f18fb4afb4aa074fb26c4d702f42968888550a3bded8c05247e045b866baef0499f079fdaeef6538f31d44deafffdfd3afa2fb4ca9082b8f1c465371a9894dd8c243fb4847e004f5256b3e90e2edde4c9fb3082ddfe4d1e734cacd96ef0706bf63c9984e22dc98851bcccd1c3494351feb458c9c6af41c0044bea3c47552b1d992ae542b17a2d0bba1a096c78d169034ecb55b6e3a7263c26017f033031228833c1daefc0dedb8cf7c3e37c9c37ebfe42f3225c326e8bcfd338804c145b16e34e4')
      for (let i = 3; i >= 0; i--) {
        onionRouting.wrapErrorPacket(packet, sharedSecrets[i])
      }
      expect(packet.toString('hex')).equal('9c5add3963fc7f6ed7f148623c84134b5647e1306419dbe2174e523fa9e2fbed3a06a19f899145610741c83ad40b7712aefaddec8c6baf7325d92ea4ca4d1df8bce517f7e54554608bf2bd8071a4f52a7a2f7ffbb1413edad81eeea5785aa9d990f2865dc23b4bc3c301a94eec4eabebca66be5cf638f693ec256aec514620cc28ee4a94bd9565bc4d4962b9d3641d4278fb319ed2b84de5b665f307a2db0f7fbb757366067d88c50f7e829138fde4f78d39b5b5802f1b92a8a820865af5cc79f9f30bc3f461c66af95d13e5e1f0381c184572a91dee1c849048a647a1158cf884064deddbf1b0b88dfe2f791428d0ba0f6fb2f04e14081f69165ae66d9297c118f0907705c9c4954a199bae0bb96fad763d690e7daa6cfda59ba7f2c8d11448b604d12d')

      onionRouting.unwrapErrorPacket(packet, sharedSecrets)
      expect(packet.toString('hex'))
        .equal('4c2fc8bc08510334b6833ad9c3e79cd1b52ae59dfe5c2a4b23ead50f09f7ee0b0002200200fe
    })

    it('full test', () => {
      let numHops = 5
      let privateKeys = []
      let publicKeys = []
      for (let i = 0; i < numHops; i++) {
        let priv = random.randomBytes(32)
        privateKeys.push(priv)
        publicKeys.push(ec.publicKeyCreate(priv, true))
      }

      let sessionKey = random.randomBytes(32)

      let ephemeralPubKeys = []
      let sharedSecrets = []
      let blindingFactors = []

      onionRouting.generateHopsParams(ephemeralPubKeys, sharedSecrets, blindingFactors, publicKeys, sessionKey)

      for (let i = 0; i < privateKeys.length; i++) {
        expect(sharedSecrets[i].toString('hex')).equal(
          onionRouting.generateSharedSecret(privateKeys[i], ephemeralPubKeys[i]).toString('hex'))
      }
      let hopsData = [{'payload': Buffer.from('000000000000000000000000000000000000000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000101010101010101000000010000000100000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000202020202020202000000020000000200000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000303030303030303000000030000000300000000000000000000000000000000', 'hex')},
        {'payload': Buffer.from('000404040404040404000000040000000400000000000000000000000000000000', 'hex')}]

      let associatedData = Buffer.from('4242424242424242424242424242424242424242424242424242424242424242', 'hex')

      let packet = onionRouting.constructPacket(publicKeys, sessionKey, hopsData, associatedData)
      for (let i = 0; i < sharedSecrets.length; i++) {
        let result = onionRouting.unwrapPacket(packet, privateKeys[i], associatedData)
        packet = result.nextPacket
        expect(result.hopsData.toString('hex')).equal(hopsData[i].payload.toString('hex'))
      }
    })

    it('check error codes', () => {
      let packet = Buffer.from('0002a07f61b78f96a4e280c4f0aab4e730d75dedf98dbea5c98b287687ec82dddc407073cfbb4e41dffdeb74358c2ecc645747b86120bec023137f4ff3229cc4123d0432b6461ca8e1239c8ece5b2d6ab9868f64741b4a5d76e29ecf3430b8f98c3b033de0e865ff08bfecbf98500f3f1c4ee9ed1ecce582551e83e07f4757d34a48eeb3e48b7e2de5e61da121fa53c2f635e4e7a74affad36e46badde08258ea63af6b24699d90562f8d1a331ef3645a1dc1f5dc4a12d06c7359224aa3bde9d390e3726e6d365a7d88e7c4a066e097fc25f733ad83bfdd0b42c003a7455625909a4d36220605aa2621091e330d7c96a08e8b6f2b0c70938fc93e0a4645d6df6d8a74b6a7fe559347b126b2152ba66d93e0b57c99dc85e7b0bb0731754eebce15d3c34afc8dd502b544d869f5a18bb47c1010c211a5e5b6ec73eb0abb0ceb119fd1a052288f4c7282c74c3c2d3564a702e730f66d85f1ca9fdfba7a319de137c91d7a16572c71eeecbd200f177c58e7fc1912e3ad5e4ee3ff48bfa48b8e290ea7cb30d3b592b37dbb9d4cfeedd4c5e2dc3828242af8117640db59b72ac70c358c19d84944038e6e8f048e0b8a66b89237d2ce174abf1b3ee5914803ebb3448fbed4ba9e7a20c4fd84a5738c951160c5b7bebaecd4dc8043d0a3dd081208460e95c7e45dc0b35ee81a805f86855583a769605fd8bdb4a1e6077208e55768c2293d8d49c12b48f1ce76ea3bd932f1ad590d314dcdb4bf611f36a22a5716a20464c344fbb5fa2c5bd47bdf164d25a8606e84f36b6f2414fe5cbc8ad97a33a7607521a4b290f1cb6bbd29cce79c8463b7e0edeb8652faf241752a83c3bd23449cea5797df1dc1128a1a75689300579f12e343db7f876ad5b2140d74c6e9c4bdd00aac3af4e9a198e6d42da100374bc0998f0efc3b75f7cfae5105fc7e496bde8c067672540c719313d1a7b93801d9b6275ecc3330fc79284b3995cd0848f64b01f84a4e9eb61529e1c08b951ae926126dee51348da4f7bc847af65b88be0ecfe9c454caf9b7db050ff8bfb076fcb6224110569efba4449527e299dc61e852cb95bd0703c8127f275d88661fcf7ac12c9313d019b13fb94e902725c09ecbd69990c071d462f066d8b2dd4963543851948707ee44e45b528c2d8b5330ebc44f3f20ada3ac05af1736bc9c7bf5d63e0ce838050fc6d6cd4997717b79bd852f00c2d2868803be694817fffd465e237050b8d8b3f3c175672a1d4efb5bbc63a330fbb16a52e42e6576f3d9ae4637e20448c565f67fc70b5018b871df23d35616f2d18bd3e5f6c6c48d34ad7475fe860166b3fa5ee402f684821454ac34e4029ce99b83e7882170508a33efd73e28d22602fe3d481893764b594eae90473df4f1ae778436a5ead06915480dbf09bd1be98dad1a82b821f9a9f633917e83a15d6485807705b6e037f349ec2cf4a24cf1a6333f3b678a6837cc5a9c2b0dc4baae2e279d120163d874ed5d89bcffa10915e31da2e189d9ea1adf6d99cd3065a2f93277d6b3d09d5bbdcfad4f4d0ef3ed5614bd27e8f7d2a4f182fa78e0560dc9c745b67818ba62f87ace3bf967a00a22ed1d8ba5746b67e7d95bd0e4c36280b276a708e1b480b7406965aa9d50a1be958170395c0264daaa850d09359ab19f7fa63a35c59ada95f0811baf0d117aeb4c2dbc5ace43e6dae7602fff3fce3d5b05f3a79d9538d6b5e4dd4c20acdfc4e6d2ad6e9d8d640c20d199634abdcb30bdc89c970ba67d045e055fd01ab5946d48bcda12e406734981f64a3f45fb4493e07a773419ffc474e9663207eb2b0640c87aa747708b2aeba998164913b729d11c56d6ce55628dbc7dedfc87d6c78ada081f68de2781fc609247af54d5403eb3399e1d64617bd70c526cff36065f183aa6f076d14467fa15bef919fb55088', 'hex')
      let privateKey = Buffer.from('05f5be4fa446144da831a8f7ceb377ec8f44e664dd3974f06af9f4c34cd03216', 'hex')
      let associatedData = Buffer.from('4242424242424242424242424242424242424242424242424242424242424242', 'hex')

      // bad version number
      packet[0] = 1
      let result = onionRouting.unwrapPacket(packet, privateKey, associatedData)
      expect(result.nextPacket).equals(undefined)
      expect(result.payload).equals(undefined)
      expect(result.error[0]).equals(onionRouting.INVALID_ONION_VERSION)

      // bad hmac
      packet[0] = 0
      packet[35] = 0 // Modify hmac part in the packet
      result = onionRouting.unwrapPacket(packet, privateKey, associatedData)
      expect(result.error[0]).equals(onionRouting.INVALID_ONION_HMAC)

      // bad ephemeral pub key
      packet[35] = 115
      packet[2] = 15
      result = onionRouting.unwrapPacket(packet, privateKey, associatedData)
      expect(result.error[0]).equals(onionRouting.INVALID_ONION_KEY)
    })
  })
})
